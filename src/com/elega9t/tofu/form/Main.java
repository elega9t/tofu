package com.elega9t.tofu.form;

import com.elega9t.tofu.App;
import com.elega9t.tofu.Config;
import com.elega9t.tofu.Config.Column;
import com.elega9t.tofu.common.ImageUtils;
import com.elega9t.tofu.common.JDBCUtils;
import com.elega9t.tofu.component.JTabbedPaneCloseButton;
import com.elega9t.tofu.persistance.DataRepository;
import com.elega9t.tofu.persistance.InvestigationRepository;
import com.elega9t.tofu.source.DataRepositorySource;
import com.elega9t.tofu.source.ExcelSource;
import java.awt.Component;

import java.io.File;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import com.elega9t.tofu.source.Source.ProgressListener;

/**
 *
 * @author elega9t
 */
public class Main extends javax.swing.JFrame {

    private DefaultMutableTreeNode rootNode;
    
    public ProgressListener sourceUpdateListener = new ProgressListener() {
        @Override
        public void update(String message) {
            jLabel1.setText(message);
            jLabel1.repaint();
        }
    };
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    public void showError(Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "<html><b>" + e.getClass().getSimpleName() + "</b>: " + e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE); 
    }

    public void showInfo(String msg, String title) {
        JOptionPane.showMessageDialog(this, msg, title, JOptionPane.INFORMATION_MESSAGE); 
    }

    public void importComplete() {
        this.reloadTree();
        JOptionPane.showMessageDialog(this, "Import Complete!", "Success!", JOptionPane.INFORMATION_MESSAGE); 
    }

    private void reloadTree() {
        try {
            for(Component component: this.dataExplorerTabbedPane.getComponents()) {
                ((DataTreePanel) component).reloadTree();
            }
        } catch (Exception e) {
            this.showError(e);
        }
    }

    void showRepositorySource(DataRepository repository) {
        try {
            SourceEditorPanel editorPanel = new SourceEditorPanel(this, repository);
            ((JTabbedPaneCloseButton) jTabbedPane1).addSourceEditorPanel(repository.getWhereClause(), ImageUtils.loadIcon("database", 16), editorPanel);
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount() - 1);
        } catch (Exception e) {
            this.showError(e);
        }
    }
    
    public void closeTab(SourceEditorPanel tab) {
        jTabbedPane1.remove(tab);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jTabbedPane1 = new JTabbedPaneCloseButton(this);
        jPanel4 = new javax.swing.JPanel();
        dataExplorerTabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Tofu v1.0 - Elega9t Ltd.");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/com/elega9t/tofu/icon/logo.png")).getImage());
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Tofu v1.0 - Elega9t Ltd.");
        jLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);

        openButton.setIcon(ImageUtils.loadIcon("folder"));
        openButton.setToolTipText("");
        openButton.setFocusPainted(false);
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(openButton);

        exportButton.setIcon(ImageUtils.loadIcon("export"));
        exportButton.setFocusPainted(false);
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(exportButton);

        jPanel3.add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOneTouchExpandable(true);
        jSplitPane2.setRightComponent(jTabbedPane1);

        jPanel4.setLayout(new java.awt.BorderLayout());

        dataExplorerTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        Config config = Config.Instance.value;
        for (Column c: config.getInvestigationData()) {
            if (c.getDataPoint()) {
                dataExplorerTabbedPane.addTab("By " + c.getName(), ImageUtils.loadIcon(c.getIconName(), 16), new DataTreePanel(this, new InvestigationRepository(), c.getDbField(), c.getIconName()));
            }
        }
        jPanel4.add(dataExplorerTabbedPane, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel4);

        jPanel3.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem2.setIcon(ImageUtils.loadIcon("folder", 16));
        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        int returnVal = App.fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = App.fileChooser.getSelectedFile();
            try {
                ExcelSource source = new ExcelSource(file);
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            source.save(sourceUpdateListener);
                            showInfo("Excel import complete!", "Success!"); 
                        } catch (Exception ex) {
                            showError(ex);
                        }
                        reloadTree();
                    }
                }.start();
            } catch (Exception e) {
                this.showError(e);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Config config = Config.Instance.value;
        try {
            DriverManager.registerDriver((Driver) Class.forName(config.getDb().getDriver()).newInstance());
        } catch (Exception e) {
            this.showError(e);
        }
        try(Connection connection = config.getDb().getConnection()) {
            List<List<Object>> tables = JDBCUtils.read(connection.getMetaData().getTables(null, "%", "%", new String[]{ "TABLE" }), "TABLE_NAME");
            if (tables.isEmpty()) {
                int result = JOptionPane.showConfirmDialog(this, "Create a new local database?", "Database missing!", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    InvestigationRepository.createTable();
                    showInfo("Local database setup complete!", "Success!"); 
                } else {
                    System.exit(0);
                }
            }
        } catch (Exception e) {
            this.showError(e);
        }
    }//GEN-LAST:event_formComponentShown

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int result = JOptionPane.showConfirmDialog(this, "Are you sure?", "Close", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        openButtonActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        boolean export = true;
        int returnVal = App.fileChooser.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = App.fileChooser.getSelectedFile();
            if (file.exists() && file.isFile()) {
                int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to overwrite existing file?", "Overwrite", JOptionPane.YES_NO_OPTION);
                export = result == JOptionPane.YES_OPTION;
            }
            if (export) {
                try {
                    new DataRepositorySource(new InvestigationRepository(), sourceUpdateListener).export(file, sourceUpdateListener);
                    showInfo("Data export completed successfully!", "Success!");
                } catch (Exception ex) {
                    showError(ex);
                }
            } else {
                showInfo("Data export cancelled!", "Success!");
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane dataExplorerTabbedPane;
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
