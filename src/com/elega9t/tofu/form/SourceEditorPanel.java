package com.elega9t.tofu.form;

import com.elega9t.tofu.App;
import com.elega9t.tofu.common.ImageUtils;
import com.elega9t.tofu.persistance.DataRepository;
import com.elega9t.tofu.persistance.InvestigationRepository;
import com.elega9t.tofu.source.DataRepositorySource;
import com.elega9t.tofu.source.RequiredData;
import com.elega9t.tofu.source.Source.EditListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elega9t
 */
public class SourceEditorPanel extends javax.swing.JPanel {

    private final Main main;
    private final DataRepositorySource source;
    
    private final EditListener editListener = new EditListener() {
        @Override
        public void edited(Integer row, Integer col) {
            saveButton.setEnabled(true);
        }
    };
    
    /**
     * Creates new form ExcelEditorPanel
     */
    public SourceEditorPanel(Main main, DataRepository repository) throws Exception {
        this.main = main;
        this.source = new DataRepositorySource(repository, main.sourceUpdateListener, editListener);
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable() {
            public String getToolTipText(MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);

                try {
                    tip = getValueAt(rowIndex, colIndex).toString();
                } catch (Exception e1) {}

                return tip;
            }
        };
        jTable1.getTableHeader().setReorderingAllowed(false);
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        saveButton.setIcon(ImageUtils.loadIcon("diskette"));
        saveButton.setEnabled(false);
        saveButton.setFocusPainted(false);
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        exportButton.setIcon(ImageUtils.loadIcon("export"));
        exportButton.setFocusPainted(false);
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(exportButton);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(main.getHeight() / 2);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(source);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    int row = jTable1.getSelectedRow();
                    try {
                        List<RequiredData> requiredData = source.getKeyValues(row);
                        DataRepository repository = new InvestigationRepository();
                        for (RequiredData r: requiredData) {
                            repository = repository.filteredInstance(r.getColumn().getDbField(), r.getValue());
                        }
                        DataRepositorySource newSource = new DataRepositorySource(repository, main.sourceUpdateListener);
                        jTable3.setModel(newSource);
                        jLabel1.setText("<html><b>Matching Entries: " + newSource.getRowCount() + "</b></html>");
                    } catch (Exception e) {
                        main.showError(e);
                    }
                }
            }
        });

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("<html><b>Rows: " + source.getRowCount() + "</b></html>");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel4.add(jLabel3);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setTopComponent(jPanel3);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable3.setModel(new DefaultTableModel());
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable3);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jLabel1.setText("<html><b>Matching Entries: 0</b></html>");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel5.add(jLabel1);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setBottomComponent(jPanel2);

        jPanel1.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        boolean export = true;
        int returnVal = App.fileChooser.showSaveDialog(main);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = App.fileChooser.getSelectedFile();
            if (file.exists() && file.isFile()) {
                int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to overwrite existing file?", "Overwrite", JOptionPane.YES_NO_OPTION);
                export = result == JOptionPane.YES_OPTION;
            }
            if (export) {
                try {
                    this.source.export(file, main.sourceUpdateListener);
                    main.showInfo("Data export completed successfully!", "Success!"); 
                } catch (Exception ex) {
                    main.showError(ex);
                }
            } else {
                main.showInfo("Data export cancelled!", "Success!"); 
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            this.source.save(this.main.sourceUpdateListener);
            saveButton.setEnabled(false);
        } catch (Exception ex) {
            this.main.showError(ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
